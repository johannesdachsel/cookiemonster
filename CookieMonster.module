<?php

namespace ProcessWire;

class CookieMonster extends WireData implements Module, ConfigurableModule
{

    public static function getModuleInfo()
    {
        return [
            'title' => 'CookieMonster',
            'version' => 300,
            'summary' => 'Add a cookie banner, integrate tracking and send relevant headers.',
            'href' => 'https://github.com/johannesdachsel/cookiemonster',
            'singular' => true,
            'autoload' => true,
            'icon' => 'github-alt',
            'author' => 'Johannes Dachsel',
            'installs' => ['TextformatterCookieTable']
        ];
    }

    public $allowTracking = false;
    public $allowAds = false;
    private $formConversionsToFire = [];

    public function init()
    {
        $this->addHookAfter("Page::render", $this, "sendHeaders");

        if (!$this->is_active) return;

        if (!isset($_COOKIE['cmnstr'])) {
            $this->addHookAfter('Page::render', $this, 'addCookieBanner');
            return;
        }

        $cookieValues = json_decode($_COOKIE['cmnstr']);

        if (property_exists($cookieValues, "statistics") && $cookieValues->statistics) {
            $this->allowTracking = true;
        }

        if (property_exists($cookieValues, "ads") && $cookieValues->ads) {
            $this->allowAds = true;
        }

        if ($this->allowTracking) {
            $this->addHookAfter('Page::render', $this, 'addTrackingCode');
        }

        if ($this->allowAds) {
            $this->addHookAfter('Page::render', $this, 'addGoogleAdsConversions');
            $this->addFormBuilderHook();
        }
    }

    public function addFormBuilderHook()
    {
        $this->addHookAfter('FormBuilderProcessor::renderSuccess', function($event) {
            $processor = $event->object;
            $formName = $processor->formName;

            if (!$this->allowAds || empty($this->data['google_ads_conversions'])) return;

            $conversions = $this->data['google_ads_conversions'];

            foreach ($conversions as $conv) {
                if (empty($conv['active']) || empty($conv['trigger_on_form'])) continue;

                if (!empty($conv['form_names']) && !in_array($formName, $conv['form_names'])) continue;

                $id = trim($conv['id']);
                $label = trim($conv['label']);
                if ($id && $label) {
                    $this->formConversionsToFire[] = [
                        'id' => $id,
                        'label' => $label
                    ];
                }
            }
        });
    }

    public function addCookieBanner($event)
    {
        $page = $event->object;
        if (in_array($page->template, ["admin", "form-builder"])) return;

        if ($this->wire('languages')) {
            $userLanguage = $this->wire('user')->language;
            $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
        } else {
            $lang = '';
        }

        $bodyText = $this->{"bodytext$lang"};

        if ($this->autolink == 1 && $this->{"target_string$lang"} != '' && $this->target_page) {
            $bodyText = str_replace($this->{"target_string$lang"}, '<a href="' . $this->wire('pages')->get($this->target_page)->url . '">' . $this->{"target_string$lang"} . '</a>', $bodyText);
        }

        $cookieBanner = '<div class="cmnstr">';
        $cookieBanner .= '<div class="cmnstr-inner">';
        $cookieBanner .= '<p class="cmnstr-title">' . $this->{"titletext$lang"} . '</p>';
        $cookieBanner .= '<div class="cmnstr-body">' . $bodyText . '</div>';
        $cookieBanner .= '
						<ul class="cmnstr-options">
							<li>
								<input type="checkbox" name="necessary" id="cmnstr_necessary" value="1" checked="checked" disabled>
								<label for="cmnstr_necessary">' . __("Notwendig") . '</label>
							</li>';
        if ($this->{"cookies_statistics$lang"}) {
            $cookieBanner .= '<li>
								<input type="checkbox" name="statistics" id="cmnstr_statistics" value="1">
								<label for="cmnstr_statistics">' . __("Statistiken") . '</label>
							</li>';
        }
        if ($this->{"introtext_ads$lang"}) {
            $cookieBanner .= "<li>
                                <input type='checkbox' name='ads' id='cmnstr_marketing' value='1' >
                                <label for='cmnstr_marketing'>" . __("Werbung") . "</label>
                            </li>";
        }

        $cookieBanner .= '	<li><button class="cmnstr-button" type="button" onclick="setCookieMonster();">' . $this->{"buttontext_confirm$lang"} . '</button>';
        if ($this->{"cookies_statistics$lang"}) {
            $cookieBanner .= '<button class="cmnstr-button highlight" type="button" onclick="setCookieMonster(true);">' . $this->{"buttontext_accept$lang"} . '</button>';
        }

        $cookieBanner .= '</li></ul>';

        $necCount = count(explode("\n", $this->{"cookies_necessary$lang"}));

        $cookieBanner .= '<details class="cmnstr-details">
							<summary>Details</summary>
							<div class="cmnstr-tabs">	
								<ul class="cmnstr-tabs-nav">
									<li><a href="#cmnstr-details-necessary" class="is-active">' . __("Notwendig") . ' (' . $necCount . ')</a></li>';
        if ($this->{"cookies_statistics$lang"}) {
            $statCount = count(explode("\n", $this->{"cookies_statistics$lang"}));
            $cookieBanner .= '<li><a href="#cmnstr-details-statistics">' . __("Statistiken") . ' (' . $statCount . ')</a></li>';
        }
        if ($this->{"introtext_ads$lang"}) {
            $adsCount = count(explode("\n", $this->{"cookies_ads$lang"}));
            $cookieBanner .= '<li><a href="#cmnstr-details-ads">' . __("Werbung") . ' (' . $adsCount . ')</a></li>';
        }

        $cookieBanner .= '</ul>
								<div class="cmnstr-tabs-container">
									<div id="cmnstr-details-necessary" class="is-active">
										<p>' . $this->{"introtext_necessary$lang"} . '</p>';
        $cookieBanner .= $this->renderCookieTable($this->{"cookies_necessary$lang"});
        $cookieBanner .= '</div>';

        if ($this->{"cookies_statistics$lang"}) {
            $cookieBanner .= '<div id="cmnstr-details-statistics">
									<p>' . $this->{"introtext_statistics$lang"} . '</p>';
            $cookieBanner .= $this->renderCookieTable($this->{"cookies_statistics$lang"});
            $cookieBanner .= '</div>';
        }
        if ($this->{"introtext_ads$lang"}) {
            $cookieBanner .= '<div id="cmnstr-details-ads">
                        <p>' . $this->{"introtext_ads$lang"} . '</p>';
            $cookieBanner .= $this->renderCookieTable($this->{"cookies_ads$lang"});
            $cookieBanner .= '</div>';
        }

        $cookieBanner .= '</div>
							</div>
						</details>';

        if ($this->imprint_page) {
            $imprintPage = $this->pages->get($this->imprint_page);
            $cookieBanner .= '<a href="' . $imprintPage->url . '">' . $imprintPage->title . '</a>';
        }

        $cookieBanner .= '</div>';
        $cookieBanner .= '</div>';

        $output = $event->return;
        $folder = $this->wire('config')->urls->$this;

        if ($this->use_stylesheet) {
            $output = str_replace("</head>", "<link rel='stylesheet' type='text/css' href='{$folder}{$this}.css'></head>", $output);
        }

        $output = str_replace("</head>", "<script src='{$folder}{$this}.js'></script></head>", $output);

        if (preg_match('~MSIE|Internet Explorer~i', $_SERVER['HTTP_USER_AGENT']) || (strpos($_SERVER['HTTP_USER_AGENT'], 'Trident/7.0; rv:11.0') !== false)) {
            $output = str_replace("</head>", "<script src='{$folder}details-polyfill.js'></script></head>", $output);
        }

        $regex = '/(<body[^>]*>)/m';
        $replace = '$1' . $cookieBanner;
        $event->return = preg_replace($regex, $replace, $output);
    }

    public function addGoogleAdsConversions(HookEvent $event) {
        static $injected = false;
        if ($injected) return;
        $injected = true;

        $output = $event->return;
        $convs = is_array($this->data['google_ads_conversions'] ?? null)
            ? $this->data['google_ads_conversions']
            : [];
        if (empty($convs)) return;

        $pageId = (int) $this->wire('page')->id;
        $scripts = '';
        $fired = [];

        foreach ($convs as $conv) {
            if (empty($conv['active']) ||
                empty($conv['trigger_on_page']) ||
                !in_array($pageId, $conv['pages'] ?? [])) continue;

            $id = trim($conv['id']);
            $label = trim($conv['label']);
            if (!$id || !$label) continue;
            $key = "{$id}/{$label}";
            if (in_array($key, $fired)) continue;
            $fired[] = $key;
            $scripts .= "<script>
                    window.addEventListener('load', function() {
                      if (typeof gtag === 'function') {
                        gtag('event','conversion',{send_to:'AW-{$id}/{$label}'});
                      }
                    });
                    </script>\n";
        }

        if (!empty($this->formConversionsToFire)) {
            foreach ($this->formConversionsToFire as $conv) {
                $id = $conv['id'];
                $label = $conv['label'];
                $key = "{$id}/{$label}";
                if (in_array($key, $fired)) continue;
                $fired[] = $key;
                $scripts .= "<script>
                        window.addEventListener('load', function() {
                          if (typeof gtag === 'function') {
                            gtag('event','conversion',{send_to:'AW-{$id}/{$label}'});
                          }
                        });
                        </script>\n";
            }
            $this->formConversionsToFire = [];
        }

        if ($scripts) {
            $event->return = preg_replace('/<\/head>/', $scripts . '</head>', $output, 1);
        }
    }

    public function addCustomTags($event) {
        $tagsDir = $this->wire('config')->paths->get($this) . 'tags/';
        if (!is_dir($tagsDir)) return;

        $output = $event->return;
        $tagFiles = glob($tagsDir . '*');
        $tagsContent = '';

        foreach ($tagFiles as $file) {
            if (is_file($file)) {
                $tagsContent .= file_get_contents($file) . "\n";
            }
        }

        if ($tagsContent) {
            $output = preg_replace('/<\/head>/', $tagsContent . '</head>', $output, 1);
            $event->return = $output;
        }
    }

    public function addTrackingCode($event)
    {
        $page = $event->object;

        if (in_array($page->template, ["admin", "form-builder"])) return;

        if ($this->ga_property_id) {
            if (strpos($this->ga_property_id, 'GTM-') === 0) {
                $event->return = str_replace(
                    '</head>',
                    $this->renderGTM() . '</head>',
                    $event->return
                );

                $gtmBody = $this->renderGTMBody();
                $regex = '/(<body[^>]*>)/m';
                $replace = '$1' . $gtmBody;
                $event->return = preg_replace($regex, $replace, $event->return);

            } else {
                $event->return = str_replace(
                    '</head>',
                    $this->renderGATracking() . '</head>',
                    $event->return
                );
            }
        }

        $this->addCustomTags($event);
    }

    private function renderConsentInit()
    {
        return <<<CONSENT_INIT
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}

gtag('consent', 'default', {
    'analytics_storage': 'denied',
    'ad_storage': 'denied',
    'ad_personalization': 'denied',
    'ad_user_data': 'denied',
    'functionality_storage': 'denied',
    'security_storage': 'granted'
});
</script>
CONSENT_INIT;
    }

    private function renderConsentUpdate($isGTM = false)
    {
        $updateScript = <<<CONSENT_UPDATE
<script>
(function () {
    function getCookie(name) {
        const value = '; ' + document.cookie;
        const parts = value.split('; ' + name + '=');
        if (parts.length === 2) return parts.pop().split(';').shift();
    }
    
    function getConsentCategories() {
        try {
            const raw = getCookie('cmnstr');
            if (!raw) return null;
            const parsed = JSON.parse(raw);
            if (typeof parsed !== 'object' || parsed === null) return null;
            return parsed;
        } catch (e) {
            console.warn('Failed to parse consent cookie:', e);
            return null;
        }
    }
    
    function updateConsent() {
        const consented = getConsentCategories();
        if (!consented) return;
        
        let updatedConsent = {
            'ad_storage': 'denied',
            'analytics_storage': 'denied', 
            'ad_user_data': 'denied',
            'ad_personalization': 'denied',
            'functionality_storage': 'denied',
            'security_storage': 'granted'
        };
        
        if (consented.statistics === true) {
            updatedConsent.analytics_storage = 'granted';
            updatedConsent.functionality_storage = 'granted';
        }
        
        if (consented.ads === true) {
            updatedConsent.ad_storage = 'granted';
            updatedConsent.ad_user_data = 'granted';
            updatedConsent.ad_personalization = 'granted';
        }
        
        //console.log('Updating Google consent:', updatedConsent);
CONSENT_UPDATE;

        if ($isGTM) {
            $updateScript .= <<<GTM_DATALAYER
        
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
            'event': 'consent_update',
            'consent_update': updatedConsent
        });
        
        if (typeof gtag === 'function') {
            gtag('consent', 'update', updatedConsent);
        }
GTM_DATALAYER;
        } else {
            $updateScript .= <<<GA_GTAG
        
        if (typeof gtag === 'function') {
            gtag('consent', 'update', updatedConsent);
        } else {
            console.warn('gtag function not available for consent update');
        }
GA_GTAG;
        }

        $updateScript .= <<<CONSENT_CLOSE
    }
    
    updateConsent();
    
    window.updateGoogleConsent = updateConsent;
    
    document.addEventListener('cookieConsentChanged', function(event) {
        console.log('Consent changed event received');
        setTimeout(updateConsent, 50);
    });
    
})();
</script>
CONSENT_CLOSE;

        return $updateScript;
    }

    public function renderGATracking()
    {
        $gaId = htmlspecialchars($this->ga_property_id ?? '', ENT_QUOTES);

        $consentInit = $this->renderConsentInit();
        $consentUpdate = $this->renderConsentUpdate(false);

        return <<<TRACKING
{$consentInit}

<script async src="https://www.googletagmanager.com/gtag/js?id={$gaId}"></script>
<script>
    gtag('js', new Date());
    gtag('config', '{$gaId}');
</script>

{$consentUpdate}
TRACKING;
    }

    public function renderGTM()
    {
        $id = $this->ga_property_id;
        if (!$id || strpos($id, 'GTM-') !== 0) return '';

        $jsId = json_encode($id);
        $consentInit = $this->renderConsentInit();
        $consentUpdate = $this->renderConsentUpdate(true);

        return <<<GTM
{$consentInit}

<script>
(function(w,d,s,l,i){
    w[l]=w[l]||[];
    w[l].push({
        'gtm.start': new Date().getTime(),
        event:'gtm.js'
    });
    var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),
        dl=l!='dataLayer'?'&l='+l:'';
    j.async=true;
    j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;
    f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer',{$jsId});
</script>

{$consentUpdate}
GTM;
    }

    public function renderGTMBody()
    {
        $id = $this->ga_property_id;
        if (!$id || strpos($id, 'GTM-') !== 0) return '';

        return <<<GTMBODY
<noscript>
<iframe src="https://www.googletagmanager.com/ns.html?id={$id}"
        height="0" width="0" style="display:none;visibility:hidden">
</iframe>
</noscript>
GTMBODY;
    }

    public function renderCookieTable($cookiefield)
    {
        if (!$cookiefield || empty($cookiefield)) return;
        $rows = explode("\n", $cookiefield);
        $out = '<table class="cmnstr-table">
					<thead><tr>';
        $out .= '<th>' . __("Name") . '</th>';
        $out .= '<th>' . __("Anbieter") . '</th>';
        $out .= '<th>' . __("Zweck") . '</th>';
        $out .= '<th>' . __("Ablauf") . '</th>';
        $out .= '</tr></thead>
				<tbody>';

        foreach ($rows as $row) {
            $columns = explode("|", $row);

            $out .= '<tr>';
            foreach ($columns as $column) {
                $out .= '<td>' . $column . '</td>';
            }
            $out .= '</tr>';
        }
        $out .= '</tbody></table>';
        return $out;
    }

    public function sendHeaders(HookEvent $event)
    {
        header("Referrer-Policy: " . $this->referrer_policy_header);
        header("Strict-Transport-Security: max-age=" . $this->strict_transport_security_header);

        if ($this->x_content_type_options_header == 1) {
            header("X-Content-Type-Options: nosniff");
        }
    }

    public static function getModuleConfigInputfields(array $data)
    {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $postConversions = $_POST['google_ads_conversions'] ?? [];
            $conversions = [];

            foreach ($postConversions as $i => $entry) {
                $label = trim($entry['label'] ?? '');
                $id = trim($entry['id'] ?? '');

                if ($label === '' && $id === '') continue;

                $formNames = $_POST["google_ads_conversions_forms_$i"] ?? [];

                $pages = [];
                if (isset($_POST["google_ads_conversions_pages_$i"]) && is_array($_POST["google_ads_conversions_pages_$i"])) {
                    $pages = array_filter(array_map('intval', $_POST["google_ads_conversions_pages_$i"]));
                }

                $triggerOnPage = !empty($_POST["trigger_on_page_$i"]);
                $triggerOnForm = !empty($_POST["trigger_on_form_$i"]);

                $conversions[] = [
                    'label' => $label,
                    'id' => $id,
                    'description' => trim($entry['description'] ?? ''),
                    'active' => !empty($entry['active']),
                    'trigger_on_page' => $triggerOnPage,
                    'trigger_on_form' => $triggerOnForm,
                    'form_names' => $formNames,
                    'pages' => $pages,
                ];
            }

            $data['google_ads_conversions'] = $conversions;

            if (isset($_POST['conversion_count'])) {
                $data['conversion_count'] = (int) $_POST['conversion_count'];
            }

            wire('modules')->saveConfig('CookieMonster', $data);
            $data = wire('modules')->getConfig('CookieMonster');
        }

        require_once(__DIR__ . '/CookieMonsterConfig.php');
        return (new CookieMonsterConfig($data))->getConfig();
    }
}